// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: protos/login.proto

package login

import (
	context "context"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LoginServiceClient is the client API for LoginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginServiceClient interface {
	SignUp(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	PasswordSignIn(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetClientInfo(ctx context.Context, in *ClientReq, opts ...grpc.CallOption) (*ClientRes, error)
	CreateOauthClient(ctx context.Context, in *ClientReq, opts ...grpc.CallOption) (*ClientRes, error)
	ValidateClientId(ctx context.Context, in *ClientReq, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
	Logout(ctx context.Context, in *Request, opts ...grpc.CallOption) (*wrappers.BoolValue, error)
	ChangePassword(ctx context.Context, in *Passwordreq, opts ...grpc.CallOption) (*Status, error)
	GetClientsByUserId(ctx context.Context, in *ClientReq, opts ...grpc.CallOption) (*GetClientsByUserIdResponse, error)
	ForgotPassword(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ForgotPasswordResponse, error)
	ResetPassword(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Status, error)
	CheckotpEnabled(ctx context.Context, in *OtpRequest, opts ...grpc.CallOption) (*OtpResponse, error)
	UpdateotpStatus(ctx context.Context, in *OtpRequest, opts ...grpc.CallOption) (*OtpResponse, error)
	EnableTwoFactorAuthentication(ctx context.Context, in *EnableTwoFactorAuthenticationRequest, opts ...grpc.CallOption) (*EnableTwoFactorAuthenticationResponse, error)
	OtpLogin(ctx context.Context, in *OtpLoginRequest, opts ...grpc.CallOption) (*Response, error)
	MigrateAccount(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type loginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginServiceClient(cc grpc.ClientConnInterface) LoginServiceClient {
	return &loginServiceClient{cc}
}

func (c *loginServiceClient) SignUp(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/login.LoginService/signUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) PasswordSignIn(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/login.LoginService/passwordSignIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) GetClientInfo(ctx context.Context, in *ClientReq, opts ...grpc.CallOption) (*ClientRes, error) {
	out := new(ClientRes)
	err := c.cc.Invoke(ctx, "/login.LoginService/getClientInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) CreateOauthClient(ctx context.Context, in *ClientReq, opts ...grpc.CallOption) (*ClientRes, error) {
	out := new(ClientRes)
	err := c.cc.Invoke(ctx, "/login.LoginService/createOauthClient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) ValidateClientId(ctx context.Context, in *ClientReq, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, "/login.LoginService/validateClientId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) Logout(ctx context.Context, in *Request, opts ...grpc.CallOption) (*wrappers.BoolValue, error) {
	out := new(wrappers.BoolValue)
	err := c.cc.Invoke(ctx, "/login.LoginService/logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) ChangePassword(ctx context.Context, in *Passwordreq, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/login.LoginService/changePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) GetClientsByUserId(ctx context.Context, in *ClientReq, opts ...grpc.CallOption) (*GetClientsByUserIdResponse, error) {
	out := new(GetClientsByUserIdResponse)
	err := c.cc.Invoke(ctx, "/login.LoginService/getClientsByUserId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) ForgotPassword(ctx context.Context, in *Request, opts ...grpc.CallOption) (*ForgotPasswordResponse, error) {
	out := new(ForgotPasswordResponse)
	err := c.cc.Invoke(ctx, "/login.LoginService/forgotPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) ResetPassword(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/login.LoginService/resetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) CheckotpEnabled(ctx context.Context, in *OtpRequest, opts ...grpc.CallOption) (*OtpResponse, error) {
	out := new(OtpResponse)
	err := c.cc.Invoke(ctx, "/login.LoginService/checkotpEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) UpdateotpStatus(ctx context.Context, in *OtpRequest, opts ...grpc.CallOption) (*OtpResponse, error) {
	out := new(OtpResponse)
	err := c.cc.Invoke(ctx, "/login.LoginService/updateotpStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) EnableTwoFactorAuthentication(ctx context.Context, in *EnableTwoFactorAuthenticationRequest, opts ...grpc.CallOption) (*EnableTwoFactorAuthenticationResponse, error) {
	out := new(EnableTwoFactorAuthenticationResponse)
	err := c.cc.Invoke(ctx, "/login.LoginService/enableTwoFactorAuthentication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) OtpLogin(ctx context.Context, in *OtpLoginRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/login.LoginService/otpLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loginServiceClient) MigrateAccount(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/login.LoginService/migrateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginServiceServer is the server API for LoginService service.
// All implementations must embed UnimplementedLoginServiceServer
// for forward compatibility
type LoginServiceServer interface {
	SignUp(context.Context, *Request) (*Response, error)
	PasswordSignIn(context.Context, *Request) (*Response, error)
	GetClientInfo(context.Context, *ClientReq) (*ClientRes, error)
	CreateOauthClient(context.Context, *ClientReq) (*ClientRes, error)
	ValidateClientId(context.Context, *ClientReq) (*wrappers.BoolValue, error)
	Logout(context.Context, *Request) (*wrappers.BoolValue, error)
	ChangePassword(context.Context, *Passwordreq) (*Status, error)
	GetClientsByUserId(context.Context, *ClientReq) (*GetClientsByUserIdResponse, error)
	ForgotPassword(context.Context, *Request) (*ForgotPasswordResponse, error)
	ResetPassword(context.Context, *Request) (*Status, error)
	CheckotpEnabled(context.Context, *OtpRequest) (*OtpResponse, error)
	UpdateotpStatus(context.Context, *OtpRequest) (*OtpResponse, error)
	EnableTwoFactorAuthentication(context.Context, *EnableTwoFactorAuthenticationRequest) (*EnableTwoFactorAuthenticationResponse, error)
	OtpLogin(context.Context, *OtpLoginRequest) (*Response, error)
	MigrateAccount(context.Context, *Request) (*Response, error)
	mustEmbedUnimplementedLoginServiceServer()
}

// UnimplementedLoginServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLoginServiceServer struct {
}

func (UnimplementedLoginServiceServer) SignUp(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignUp not implemented")
}
func (UnimplementedLoginServiceServer) PasswordSignIn(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PasswordSignIn not implemented")
}
func (UnimplementedLoginServiceServer) GetClientInfo(context.Context, *ClientReq) (*ClientRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientInfo not implemented")
}
func (UnimplementedLoginServiceServer) CreateOauthClient(context.Context, *ClientReq) (*ClientRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOauthClient not implemented")
}
func (UnimplementedLoginServiceServer) ValidateClientId(context.Context, *ClientReq) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateClientId not implemented")
}
func (UnimplementedLoginServiceServer) Logout(context.Context, *Request) (*wrappers.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedLoginServiceServer) ChangePassword(context.Context, *Passwordreq) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedLoginServiceServer) GetClientsByUserId(context.Context, *ClientReq) (*GetClientsByUserIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientsByUserId not implemented")
}
func (UnimplementedLoginServiceServer) ForgotPassword(context.Context, *Request) (*ForgotPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgotPassword not implemented")
}
func (UnimplementedLoginServiceServer) ResetPassword(context.Context, *Request) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (UnimplementedLoginServiceServer) CheckotpEnabled(context.Context, *OtpRequest) (*OtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckotpEnabled not implemented")
}
func (UnimplementedLoginServiceServer) UpdateotpStatus(context.Context, *OtpRequest) (*OtpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateotpStatus not implemented")
}
func (UnimplementedLoginServiceServer) EnableTwoFactorAuthentication(context.Context, *EnableTwoFactorAuthenticationRequest) (*EnableTwoFactorAuthenticationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableTwoFactorAuthentication not implemented")
}
func (UnimplementedLoginServiceServer) OtpLogin(context.Context, *OtpLoginRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OtpLogin not implemented")
}
func (UnimplementedLoginServiceServer) MigrateAccount(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateAccount not implemented")
}
func (UnimplementedLoginServiceServer) mustEmbedUnimplementedLoginServiceServer() {}

// UnsafeLoginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginServiceServer will
// result in compilation errors.
type UnsafeLoginServiceServer interface {
	mustEmbedUnimplementedLoginServiceServer()
}

func RegisterLoginServiceServer(s grpc.ServiceRegistrar, srv LoginServiceServer) {
	s.RegisterService(&LoginService_ServiceDesc, srv)
}

func _LoginService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.LoginService/signUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).SignUp(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_PasswordSignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).PasswordSignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.LoginService/passwordSignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).PasswordSignIn(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_GetClientInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).GetClientInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.LoginService/getClientInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).GetClientInfo(ctx, req.(*ClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_CreateOauthClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).CreateOauthClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.LoginService/createOauthClient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).CreateOauthClient(ctx, req.(*ClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_ValidateClientId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).ValidateClientId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.LoginService/validateClientId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).ValidateClientId(ctx, req.(*ClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.LoginService/logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).Logout(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Passwordreq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.LoginService/changePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).ChangePassword(ctx, req.(*Passwordreq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_GetClientsByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).GetClientsByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.LoginService/getClientsByUserId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).GetClientsByUserId(ctx, req.(*ClientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_ForgotPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).ForgotPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.LoginService/forgotPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).ForgotPassword(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.LoginService/resetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).ResetPassword(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_CheckotpEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).CheckotpEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.LoginService/checkotpEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).CheckotpEnabled(ctx, req.(*OtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_UpdateotpStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).UpdateotpStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.LoginService/updateotpStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).UpdateotpStatus(ctx, req.(*OtpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_EnableTwoFactorAuthentication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EnableTwoFactorAuthenticationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).EnableTwoFactorAuthentication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.LoginService/enableTwoFactorAuthentication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).EnableTwoFactorAuthentication(ctx, req.(*EnableTwoFactorAuthenticationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_OtpLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OtpLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).OtpLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.LoginService/otpLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).OtpLogin(ctx, req.(*OtpLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoginService_MigrateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginServiceServer).MigrateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/login.LoginService/migrateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginServiceServer).MigrateAccount(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// LoginService_ServiceDesc is the grpc.ServiceDesc for LoginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "login.LoginService",
	HandlerType: (*LoginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "signUp",
			Handler:    _LoginService_SignUp_Handler,
		},
		{
			MethodName: "passwordSignIn",
			Handler:    _LoginService_PasswordSignIn_Handler,
		},
		{
			MethodName: "getClientInfo",
			Handler:    _LoginService_GetClientInfo_Handler,
		},
		{
			MethodName: "createOauthClient",
			Handler:    _LoginService_CreateOauthClient_Handler,
		},
		{
			MethodName: "validateClientId",
			Handler:    _LoginService_ValidateClientId_Handler,
		},
		{
			MethodName: "logout",
			Handler:    _LoginService_Logout_Handler,
		},
		{
			MethodName: "changePassword",
			Handler:    _LoginService_ChangePassword_Handler,
		},
		{
			MethodName: "getClientsByUserId",
			Handler:    _LoginService_GetClientsByUserId_Handler,
		},
		{
			MethodName: "forgotPassword",
			Handler:    _LoginService_ForgotPassword_Handler,
		},
		{
			MethodName: "resetPassword",
			Handler:    _LoginService_ResetPassword_Handler,
		},
		{
			MethodName: "checkotpEnabled",
			Handler:    _LoginService_CheckotpEnabled_Handler,
		},
		{
			MethodName: "updateotpStatus",
			Handler:    _LoginService_UpdateotpStatus_Handler,
		},
		{
			MethodName: "enableTwoFactorAuthentication",
			Handler:    _LoginService_EnableTwoFactorAuthentication_Handler,
		},
		{
			MethodName: "otpLogin",
			Handler:    _LoginService_OtpLogin_Handler,
		},
		{
			MethodName: "migrateAccount",
			Handler:    _LoginService_MigrateAccount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/login.proto",
}
