// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: protos/login.proto

package login

import (
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_login_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_protos_login_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_protos_login_proto_rawDescGZIP(), []int{0}
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId             string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	ProviderId         string `protobuf:"bytes,2,opt,name=providerId,proto3" json:"providerId,omitempty"`
	AccessToken        string `protobuf:"bytes,3,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	EmailVerified      bool   `protobuf:"varint,4,opt,name=emailVerified,proto3" json:"emailVerified,omitempty"`
	Email              string `protobuf:"bytes,5,opt,name=email,proto3" json:"email,omitempty"`
	OauthAccessToken   string `protobuf:"bytes,6,opt,name=oauthAccessToken,proto3" json:"oauthAccessToken,omitempty"`
	FirstName          string `protobuf:"bytes,7,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName           string `protobuf:"bytes,8,opt,name=lastName,proto3" json:"lastName,omitempty"`
	FullName           string `protobuf:"bytes,9,opt,name=fullName,proto3" json:"fullName,omitempty"`
	DisplayName        string `protobuf:"bytes,10,opt,name=displayName,proto3" json:"displayName,omitempty"`
	PhotoUrl           string `protobuf:"bytes,11,opt,name=photoUrl,proto3" json:"photoUrl,omitempty"`
	ExpiresIn          string `protobuf:"bytes,12,opt,name=expiresIn,proto3" json:"expiresIn,omitempty"`
	FederatedId        string `protobuf:"bytes,13,opt,name=federatedId,proto3" json:"federatedId,omitempty"`
	LocalId            string `protobuf:"bytes,14,opt,name=localId,proto3" json:"localId,omitempty"`
	RefreshToken       string `protobuf:"bytes,15,opt,name=refreshToken,proto3" json:"refreshToken,omitempty"`
	Password           string `protobuf:"bytes,16,opt,name=password,proto3" json:"password,omitempty"`
	Gender             string `protobuf:"bytes,17,opt,name=gender,proto3" json:"gender,omitempty"`
	Address            string `protobuf:"bytes,18,opt,name=address,proto3" json:"address,omitempty"`
	Age                int32  `protobuf:"varint,19,opt,name=age,proto3" json:"age,omitempty"`
	Experience         string `protobuf:"bytes,20,opt,name=experience,proto3" json:"experience,omitempty"`
	PlayingTime        int32  `protobuf:"varint,21,opt,name=playingTime,proto3" json:"playingTime,omitempty"`
	PreferredPlatforms string `protobuf:"bytes,22,opt,name=preferredPlatforms,proto3" json:"preferredPlatforms,omitempty"`
	LinkedUserId       string `protobuf:"bytes,23,opt,name=linkedUserId,proto3" json:"linkedUserId,omitempty"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_login_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_protos_login_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_protos_login_proto_rawDescGZIP(), []int{1}
}

func (x *Request) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Request) GetProviderId() string {
	if x != nil {
		return x.ProviderId
	}
	return ""
}

func (x *Request) GetAccessToken() string {
	if x != nil {
		return x.AccessToken
	}
	return ""
}

func (x *Request) GetEmailVerified() bool {
	if x != nil {
		return x.EmailVerified
	}
	return false
}

func (x *Request) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Request) GetOauthAccessToken() string {
	if x != nil {
		return x.OauthAccessToken
	}
	return ""
}

func (x *Request) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Request) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Request) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *Request) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Request) GetPhotoUrl() string {
	if x != nil {
		return x.PhotoUrl
	}
	return ""
}

func (x *Request) GetExpiresIn() string {
	if x != nil {
		return x.ExpiresIn
	}
	return ""
}

func (x *Request) GetFederatedId() string {
	if x != nil {
		return x.FederatedId
	}
	return ""
}

func (x *Request) GetLocalId() string {
	if x != nil {
		return x.LocalId
	}
	return ""
}

func (x *Request) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

func (x *Request) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Request) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *Request) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Request) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *Request) GetExperience() string {
	if x != nil {
		return x.Experience
	}
	return ""
}

func (x *Request) GetPlayingTime() int32 {
	if x != nil {
		return x.PlayingTime
	}
	return 0
}

func (x *Request) GetPreferredPlatforms() string {
	if x != nil {
		return x.PreferredPlatforms
	}
	return ""
}

func (x *Request) GetLinkedUserId() string {
	if x != nil {
		return x.LinkedUserId
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users            *Users `protobuf:"bytes,1,opt,name=users,proto3" json:"users,omitempty"`
	OauthAccessToken string `protobuf:"bytes,2,opt,name=oauthAccessToken,proto3" json:"oauthAccessToken,omitempty"`
	FirstName        string `protobuf:"bytes,3,opt,name=firstName,proto3" json:"firstName,omitempty"`
	LastName         string `protobuf:"bytes,4,opt,name=lastName,proto3" json:"lastName,omitempty"`
	FullName         string `protobuf:"bytes,5,opt,name=fullName,proto3" json:"fullName,omitempty"`
	ExpiresIn        string `protobuf:"bytes,6,opt,name=expiresIn,proto3" json:"expiresIn,omitempty"`
	IdpUrl           string `protobuf:"bytes,7,opt,name=idpUrl,proto3" json:"idpUrl,omitempty"`
	IsNewUser        bool   `protobuf:"varint,8,opt,name=isNewUser,proto3" json:"isNewUser,omitempty"`
	RefreshToken     string `protobuf:"bytes,9,opt,name=refreshToken,proto3" json:"refreshToken,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_login_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_protos_login_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_protos_login_proto_rawDescGZIP(), []int{2}
}

func (x *Response) GetUsers() *Users {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *Response) GetOauthAccessToken() string {
	if x != nil {
		return x.OauthAccessToken
	}
	return ""
}

func (x *Response) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Response) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Response) GetFullName() string {
	if x != nil {
		return x.FullName
	}
	return ""
}

func (x *Response) GetExpiresIn() string {
	if x != nil {
		return x.ExpiresIn
	}
	return ""
}

func (x *Response) GetIdpUrl() string {
	if x != nil {
		return x.IdpUrl
	}
	return ""
}

func (x *Response) GetIsNewUser() bool {
	if x != nil {
		return x.IsNewUser
	}
	return false
}

func (x *Response) GetRefreshToken() string {
	if x != nil {
		return x.RefreshToken
	}
	return ""
}

type Users struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId             string               `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Email              string               `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	EmailVerified      bool                 `protobuf:"varint,3,opt,name=emailVerified,proto3" json:"emailVerified,omitempty"`
	DisplayName        string               `protobuf:"bytes,4,opt,name=displayName,proto3" json:"displayName,omitempty"`
	LinkedAccounts     *LinkedAccounts      `protobuf:"bytes,5,opt,name=linkedAccounts,proto3" json:"linkedAccounts,omitempty"`
	PhotoUrl           string               `protobuf:"bytes,6,opt,name=photoUrl,proto3" json:"photoUrl,omitempty"`
	UpdatedAt          *timestamp.Timestamp `protobuf:"bytes,7,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Disabled           bool                 `protobuf:"varint,8,opt,name=disabled,proto3" json:"disabled,omitempty"`
	CreatedAt          *timestamp.Timestamp `protobuf:"bytes,9,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	PasswordHash       string               `protobuf:"bytes,10,opt,name=passwordHash,proto3" json:"passwordHash,omitempty"`
	Gender             string               `protobuf:"bytes,11,opt,name=gender,proto3" json:"gender,omitempty"`
	Address            string               `protobuf:"bytes,12,opt,name=address,proto3" json:"address,omitempty"`
	Age                int32                `protobuf:"varint,13,opt,name=age,proto3" json:"age,omitempty"`
	Experience         string               `protobuf:"bytes,14,opt,name=experience,proto3" json:"experience,omitempty"`
	PlayingTime        int32                `protobuf:"varint,15,opt,name=playingTime,proto3" json:"playingTime,omitempty"`
	PreferredPlatforms string               `protobuf:"bytes,16,opt,name=preferredPlatforms,proto3" json:"preferredPlatforms,omitempty"`
	OtpEnabled         int32                `protobuf:"varint,17,opt,name=otpEnabled,proto3" json:"otpEnabled,omitempty"`
	PreferredMethod    string               `protobuf:"bytes,18,opt,name=preferredMethod,proto3" json:"preferredMethod,omitempty"`
	OtpCode            string               `protobuf:"bytes,19,opt,name=otpCode,proto3" json:"otpCode,omitempty"`
}

func (x *Users) Reset() {
	*x = Users{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_login_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Users) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Users) ProtoMessage() {}

func (x *Users) ProtoReflect() protoreflect.Message {
	mi := &file_protos_login_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Users.ProtoReflect.Descriptor instead.
func (*Users) Descriptor() ([]byte, []int) {
	return file_protos_login_proto_rawDescGZIP(), []int{3}
}

func (x *Users) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Users) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Users) GetEmailVerified() bool {
	if x != nil {
		return x.EmailVerified
	}
	return false
}

func (x *Users) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Users) GetLinkedAccounts() *LinkedAccounts {
	if x != nil {
		return x.LinkedAccounts
	}
	return nil
}

func (x *Users) GetPhotoUrl() string {
	if x != nil {
		return x.PhotoUrl
	}
	return ""
}

func (x *Users) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *Users) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *Users) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Users) GetPasswordHash() string {
	if x != nil {
		return x.PasswordHash
	}
	return ""
}

func (x *Users) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *Users) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Users) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *Users) GetExperience() string {
	if x != nil {
		return x.Experience
	}
	return ""
}

func (x *Users) GetPlayingTime() int32 {
	if x != nil {
		return x.PlayingTime
	}
	return 0
}

func (x *Users) GetPreferredPlatforms() string {
	if x != nil {
		return x.PreferredPlatforms
	}
	return ""
}

func (x *Users) GetOtpEnabled() int32 {
	if x != nil {
		return x.OtpEnabled
	}
	return 0
}

func (x *Users) GetPreferredMethod() string {
	if x != nil {
		return x.PreferredMethod
	}
	return ""
}

func (x *Users) GetOtpCode() string {
	if x != nil {
		return x.OtpCode
	}
	return ""
}

type LinkedAccounts struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProviderId  string `protobuf:"bytes,1,opt,name=providerId,proto3" json:"providerId,omitempty"`
	FederatedId string `protobuf:"bytes,2,opt,name=federatedId,proto3" json:"federatedId,omitempty"`
	Email       string `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
}

func (x *LinkedAccounts) Reset() {
	*x = LinkedAccounts{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_login_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkedAccounts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedAccounts) ProtoMessage() {}

func (x *LinkedAccounts) ProtoReflect() protoreflect.Message {
	mi := &file_protos_login_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedAccounts.ProtoReflect.Descriptor instead.
func (*LinkedAccounts) Descriptor() ([]byte, []int) {
	return file_protos_login_proto_rawDescGZIP(), []int{4}
}

func (x *LinkedAccounts) GetProviderId() string {
	if x != nil {
		return x.ProviderId
	}
	return ""
}

func (x *LinkedAccounts) GetFederatedId() string {
	if x != nil {
		return x.FederatedId
	}
	return ""
}

func (x *LinkedAccounts) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type ClientReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId    string `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ClientName  string `protobuf:"bytes,2,opt,name=clientName,proto3" json:"clientName,omitempty"`
	RedirectUrl string `protobuf:"bytes,3,opt,name=redirectUrl,proto3" json:"redirectUrl,omitempty"`
	UserId      string `protobuf:"bytes,4,opt,name=userId,proto3" json:"userId,omitempty"`
	ProjectId   string `protobuf:"bytes,5,opt,name=projectId,proto3" json:"projectId,omitempty"`
}

func (x *ClientReq) Reset() {
	*x = ClientReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_login_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientReq) ProtoMessage() {}

func (x *ClientReq) ProtoReflect() protoreflect.Message {
	mi := &file_protos_login_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientReq.ProtoReflect.Descriptor instead.
func (*ClientReq) Descriptor() ([]byte, []int) {
	return file_protos_login_proto_rawDescGZIP(), []int{5}
}

func (x *ClientReq) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientReq) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *ClientReq) GetRedirectUrl() string {
	if x != nil {
		return x.RedirectUrl
	}
	return ""
}

func (x *ClientReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ClientReq) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

type ClientRes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientId     string               `protobuf:"bytes,1,opt,name=clientId,proto3" json:"clientId,omitempty"`
	ProjectId    string               `protobuf:"bytes,2,opt,name=projectId,proto3" json:"projectId,omitempty"`
	UserId       string               `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
	RedirectUrl  string               `protobuf:"bytes,4,opt,name=redirectUrl,proto3" json:"redirectUrl,omitempty"`
	CreatedAt    *timestamp.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt    *timestamp.Timestamp `protobuf:"bytes,6,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	Active       bool                 `protobuf:"varint,7,opt,name=active,proto3" json:"active,omitempty"`
	ClientName   string               `protobuf:"bytes,8,opt,name=clientName,proto3" json:"clientName,omitempty"`
	ClientSecret string               `protobuf:"bytes,9,opt,name=clientSecret,proto3" json:"clientSecret,omitempty"`
}

func (x *ClientRes) Reset() {
	*x = ClientRes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_login_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientRes) ProtoMessage() {}

func (x *ClientRes) ProtoReflect() protoreflect.Message {
	mi := &file_protos_login_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientRes.ProtoReflect.Descriptor instead.
func (*ClientRes) Descriptor() ([]byte, []int) {
	return file_protos_login_proto_rawDescGZIP(), []int{6}
}

func (x *ClientRes) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *ClientRes) GetProjectId() string {
	if x != nil {
		return x.ProjectId
	}
	return ""
}

func (x *ClientRes) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *ClientRes) GetRedirectUrl() string {
	if x != nil {
		return x.RedirectUrl
	}
	return ""
}

func (x *ClientRes) GetCreatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *ClientRes) GetUpdatedAt() *timestamp.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *ClientRes) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *ClientRes) GetClientName() string {
	if x != nil {
		return x.ClientName
	}
	return ""
}

func (x *ClientRes) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

type Passwordreq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	OldPassword string `protobuf:"bytes,2,opt,name=oldPassword,proto3" json:"oldPassword,omitempty"`
	NewPassword string `protobuf:"bytes,3,opt,name=newPassword,proto3" json:"newPassword,omitempty"`
}

func (x *Passwordreq) Reset() {
	*x = Passwordreq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_login_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Passwordreq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Passwordreq) ProtoMessage() {}

func (x *Passwordreq) ProtoReflect() protoreflect.Message {
	mi := &file_protos_login_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Passwordreq.ProtoReflect.Descriptor instead.
func (*Passwordreq) Descriptor() ([]byte, []int) {
	return file_protos_login_proto_rawDescGZIP(), []int{7}
}

func (x *Passwordreq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Passwordreq) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *Passwordreq) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_login_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Status) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Status) ProtoMessage() {}

func (x *Status) ProtoReflect() protoreflect.Message {
	mi := &file_protos_login_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Status.ProtoReflect.Descriptor instead.
func (*Status) Descriptor() ([]byte, []int) {
	return file_protos_login_proto_rawDescGZIP(), []int{8}
}

func (x *Status) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Status) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GetClientsByUserIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clients []*ClientRes `protobuf:"bytes,1,rep,name=clients,proto3" json:"clients,omitempty"`
}

func (x *GetClientsByUserIdResponse) Reset() {
	*x = GetClientsByUserIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_login_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClientsByUserIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientsByUserIdResponse) ProtoMessage() {}

func (x *GetClientsByUserIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_login_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientsByUserIdResponse.ProtoReflect.Descriptor instead.
func (*GetClientsByUserIdResponse) Descriptor() ([]byte, []int) {
	return file_protos_login_proto_rawDescGZIP(), []int{9}
}

func (x *GetClientsByUserIdResponse) GetClients() []*ClientRes {
	if x != nil {
		return x.Clients
	}
	return nil
}

type ForgotPasswordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code     int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message  string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	ResetUrl string `protobuf:"bytes,3,opt,name=resetUrl,proto3" json:"resetUrl,omitempty"`
}

func (x *ForgotPasswordResponse) Reset() {
	*x = ForgotPasswordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_login_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForgotPasswordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForgotPasswordResponse) ProtoMessage() {}

func (x *ForgotPasswordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_login_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForgotPasswordResponse.ProtoReflect.Descriptor instead.
func (*ForgotPasswordResponse) Descriptor() ([]byte, []int) {
	return file_protos_login_proto_rawDescGZIP(), []int{10}
}

func (x *ForgotPasswordResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ForgotPasswordResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ForgotPasswordResponse) GetResetUrl() string {
	if x != nil {
		return x.ResetUrl
	}
	return ""
}

type OtpRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	OtpEnabled int32  `protobuf:"varint,2,opt,name=otpEnabled,proto3" json:"otpEnabled,omitempty"`
}

func (x *OtpRequest) Reset() {
	*x = OtpRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_login_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtpRequest) ProtoMessage() {}

func (x *OtpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_login_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtpRequest.ProtoReflect.Descriptor instead.
func (*OtpRequest) Descriptor() ([]byte, []int) {
	return file_protos_login_proto_rawDescGZIP(), []int{11}
}

func (x *OtpRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OtpRequest) GetOtpEnabled() int32 {
	if x != nil {
		return x.OtpEnabled
	}
	return 0
}

type OtpResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OtpEnabled int32 `protobuf:"varint,1,opt,name=otpEnabled,proto3" json:"otpEnabled,omitempty"`
}

func (x *OtpResponse) Reset() {
	*x = OtpResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_login_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtpResponse) ProtoMessage() {}

func (x *OtpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_login_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtpResponse.ProtoReflect.Descriptor instead.
func (*OtpResponse) Descriptor() ([]byte, []int) {
	return file_protos_login_proto_rawDescGZIP(), []int{12}
}

func (x *OtpResponse) GetOtpEnabled() int32 {
	if x != nil {
		return x.OtpEnabled
	}
	return 0
}

type EnableTwoFactorAuthenticationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId        string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	OtpEnabled    int32  `protobuf:"varint,2,opt,name=otpEnabled,proto3" json:"otpEnabled,omitempty"`
	OtpMethod     string `protobuf:"bytes,3,opt,name=otpMethod,proto3" json:"otpMethod,omitempty"`
	Service       string `protobuf:"bytes,4,opt,name=service,proto3" json:"service,omitempty"`
	OtpMethodData string `protobuf:"bytes,5,opt,name=otpMethodData,proto3" json:"otpMethodData,omitempty"`
}

func (x *EnableTwoFactorAuthenticationRequest) Reset() {
	*x = EnableTwoFactorAuthenticationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_login_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableTwoFactorAuthenticationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableTwoFactorAuthenticationRequest) ProtoMessage() {}

func (x *EnableTwoFactorAuthenticationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_login_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableTwoFactorAuthenticationRequest.ProtoReflect.Descriptor instead.
func (*EnableTwoFactorAuthenticationRequest) Descriptor() ([]byte, []int) {
	return file_protos_login_proto_rawDescGZIP(), []int{13}
}

func (x *EnableTwoFactorAuthenticationRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *EnableTwoFactorAuthenticationRequest) GetOtpEnabled() int32 {
	if x != nil {
		return x.OtpEnabled
	}
	return 0
}

func (x *EnableTwoFactorAuthenticationRequest) GetOtpMethod() string {
	if x != nil {
		return x.OtpMethod
	}
	return ""
}

func (x *EnableTwoFactorAuthenticationRequest) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *EnableTwoFactorAuthenticationRequest) GetOtpMethodData() string {
	if x != nil {
		return x.OtpMethodData
	}
	return ""
}

type EnableTwoFactorAuthenticationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *EnableTwoFactorAuthenticationResponse) Reset() {
	*x = EnableTwoFactorAuthenticationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_login_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableTwoFactorAuthenticationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableTwoFactorAuthenticationResponse) ProtoMessage() {}

func (x *EnableTwoFactorAuthenticationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_protos_login_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableTwoFactorAuthenticationResponse.ProtoReflect.Descriptor instead.
func (*EnableTwoFactorAuthenticationResponse) Descriptor() ([]byte, []int) {
	return file_protos_login_proto_rawDescGZIP(), []int{14}
}

func (x *EnableTwoFactorAuthenticationResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type OtpLoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
	OtpMethod string `protobuf:"bytes,3,opt,name=otpMethod,proto3" json:"otpMethod,omitempty"`
	OtpCode   int32  `protobuf:"varint,2,opt,name=otpCode,proto3" json:"otpCode,omitempty"`
}

func (x *OtpLoginRequest) Reset() {
	*x = OtpLoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_login_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OtpLoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OtpLoginRequest) ProtoMessage() {}

func (x *OtpLoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_protos_login_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OtpLoginRequest.ProtoReflect.Descriptor instead.
func (*OtpLoginRequest) Descriptor() ([]byte, []int) {
	return file_protos_login_proto_rawDescGZIP(), []int{15}
}

func (x *OtpLoginRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *OtpLoginRequest) GetOtpMethod() string {
	if x != nil {
		return x.OtpMethod
	}
	return ""
}

func (x *OtpLoginRequest) GetOtpCode() int32 {
	if x != nil {
		return x.OtpCode
	}
	return 0
}

var File_protos_login_proto protoreflect.FileDescriptor

var file_protos_login_proto_rawDesc = []byte{
	0x0a, 0x12, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2c, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x73, 0x77, 0x61, 0x67, 0x67, 0x65, 0x72, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0xd3, 0x05, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x6f,
	0x61, 0x75, 0x74, 0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x55, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f,
	0x55, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49,
	0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x67,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x69, 0x6e, 0x6b, 0x65,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0xa8, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6f, 0x61, 0x75, 0x74,
	0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x70, 0x55,
	0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x70, 0x55, 0x72, 0x6c,
	0x12, 0x1c, 0x0a, 0x09, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x4e, 0x65, 0x77, 0x55, 0x73, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x22, 0xa6, 0x05, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x52, 0x0e, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x72, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x65, 0x72,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x70, 0x6c, 0x61, 0x79,
	0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x74, 0x70, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x74, 0x70,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x74, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x68, 0x0a, 0x0e, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x66, 0x65, 0x64, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x9f, 0x01, 0x0a, 0x09, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0xcf, 0x02, 0x0a, 0x09, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x22, 0x69, 0x0a, 0x0b, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x72, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x20, 0x0a, 0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x22, 0x36, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x48, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x52, 0x07, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x62, 0x0a, 0x16, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x73, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x73, 0x65, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x44, 0x0a, 0x0a, 0x6f, 0x74,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x74, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x74, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x22, 0x2d, 0x0a, 0x0b, 0x6f, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x6f, 0x74, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x74, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22,
	0xbc, 0x01, 0x0a, 0x24, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1e, 0x0a, 0x0a, 0x6f, 0x74, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x6f, 0x74, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x6f, 0x74, 0x70, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x6f, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3f,
	0x0a, 0x25, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x61, 0x0a, 0x0f, 0x4f, 0x74, 0x70, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x74,
	0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f,
	0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x74, 0x70, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x74, 0x70, 0x43, 0x6f,
	0x64, 0x65, 0x32, 0x89, 0x17, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0xcb, 0x01, 0x0a, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x12, 0x0e,
	0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f,
	0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x9f, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x55, 0x70,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x7b, 0x1a, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x20, 0x6e,
	0x65, 0x77, 0x20, 0x70, 0x39, 0x39, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4a, 0x61,
	0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x5a, 0x22, 0x58, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x44, 0x7b, 0x22, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x74, 0x6f, 0x6d, 0x40, 0x67, 0x6d, 0x61, 0x69,
	0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x2c, 0x20, 0x22, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x3a, 0x20, 0x22, 0x70, 0x61, 0x73, 0x73, 0x22, 0x2c, 0x20, 0x22, 0x64, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x54, 0x6f, 0x6d, 0x22,
	0x7d, 0x12, 0xc8, 0x01, 0x0a, 0x0e, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x49, 0x6e, 0x12, 0x0e, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x94, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2f,
	0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x3a, 0x01,
	0x2a, 0x92, 0x41, 0x68, 0x1a, 0x19, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x75, 0x73,
	0x69, 0x6e, 0x67, 0x20, 0x70, 0x39, 0x39, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4a,
	0x4b, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x44, 0x22, 0x42, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x2e, 0x7b, 0x22,
	0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x74, 0x6f, 0x6d, 0x40, 0x67, 0x6d, 0x61,
	0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x2c, 0x20, 0x22, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x70, 0x61, 0x73, 0x73, 0x22, 0x7d, 0x12, 0xc6, 0x01, 0x0a,
	0x0d, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10,
	0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x10, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x22, 0x90, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2f, 0x67, 0x65, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x65,
	0x1a, 0x1b, 0x67, 0x65, 0x74, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x20, 0x62, 0x79, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x4a, 0x46, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x3f, 0x22, 0x3d, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x29, 0x7b, 0x22, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x31, 0x31, 0x32, 0x32, 0x33, 0x35,
	0x33, 0x31, 0x38, 0x33, 0x39, 0x37, 0x33, 0x36, 0x32, 0x33, 0x33, 0x33, 0x31, 0x35, 0x34, 0x32,
	0x33, 0x30, 0x39, 0x22, 0x7d, 0x12, 0x98, 0x02, 0x0a, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4f, 0x61, 0x75, 0x74, 0x68, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x10, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x22,
	0xde, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x22, 0x23, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x3a, 0x01, 0x2a,
	0x92, 0x41, 0xac, 0x01, 0x1a, 0x16, 0x63, 0x72, 0x65, 0x61, 0x74, 0x20, 0x70, 0x39, 0x39, 0x20,
	0x4f, 0x61, 0x75, 0x74, 0x68, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4a, 0x91, 0x01, 0x0a,
	0x03, 0x32, 0x30, 0x30, 0x12, 0x89, 0x01, 0x22, 0x86, 0x01, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x72, 0x7b, 0x22,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x6d, 0x79,
	0x50, 0x39, 0x39, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x22, 0x2c, 0x20, 0x22, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x55, 0x72, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x22, 0x2c, 0x20, 0x22, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x22, 0x3a, 0x20, 0x22, 0x31, 0x31, 0x32, 0x32, 0x33, 0x35, 0x33, 0x31, 0x38, 0x33, 0x39,
	0x37, 0x33, 0x36, 0x32, 0x33, 0x33, 0x33, 0x31, 0x35, 0x34, 0x32, 0x33, 0x30, 0x34, 0x22, 0x7d,
	0x12, 0x42, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x00, 0x12, 0x83, 0x01, 0x0a, 0x06, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12,
	0x0e, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x4d, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x22, 0x16, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x2f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x3a, 0x01, 0x2a, 0x92, 0x41,
	0x29, 0x1a, 0x06, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x4a, 0x1f, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x18, 0x22, 0x16, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x02, 0x7b, 0x7d, 0x12, 0xf0, 0x01, 0x0a, 0x0e, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x2e,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x72, 0x65,
	0x71, 0x1a, 0x0d, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x22, 0xba, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2f, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x8d, 0x01,
	0x1a, 0x17, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4a, 0x72, 0x0a, 0x03, 0x32, 0x30, 0x30,
	0x12, 0x6b, 0x22, 0x69, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x55, 0x7b, 0x22, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x3a, 0x20, 0x22, 0x31, 0x31, 0x32, 0x32, 0x33, 0x35, 0x33, 0x31, 0x38, 0x33, 0x39, 0x37,
	0x33, 0x36, 0x32, 0x33, 0x33, 0x33, 0x31, 0x35, 0x34, 0x32, 0x33, 0x30, 0x34, 0x22, 0x2c, 0x20,
	0x22, 0x6f, 0x6c, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x3a, 0x20, 0x22,
	0x70, 0x61, 0x73, 0x73, 0x22, 0x2c, 0x20, 0x22, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x31, 0x32, 0x33, 0x34, 0x22, 0x7d, 0x12, 0xd2, 0x01,
	0x0a, 0x12, 0x67, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x10, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x47,
	0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x86, 0x01, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x22, 0x17, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73,
	0x68, 0x69, 0x70, 0x2f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41,
	0x61, 0x1a, 0x19, 0x67, 0x65, 0x74, 0x20, 0x61, 0x6c, 0x6c, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x20, 0x62, 0x79, 0x20, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x4a, 0x44, 0x0a, 0x03,
	0x32, 0x30, 0x30, 0x12, 0x3d, 0x22, 0x3b, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x27, 0x7b, 0x22, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x31, 0x31, 0x32, 0x32, 0x33, 0x35, 0x33, 0x31, 0x38,
	0x33, 0x39, 0x37, 0x33, 0x36, 0x32, 0x33, 0x33, 0x33, 0x31, 0x35, 0x34, 0x32, 0x33, 0x30, 0x34,
	0x22, 0x7d, 0x12, 0xd4, 0x01, 0x0a, 0x0e, 0x66, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x46, 0x6f,
	0x72, 0x67, 0x6f, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x92, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x22, 0x1e, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2f, 0x66,
	0x6f, 0x72, 0x67, 0x6f, 0x74, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x01, 0x2a,
	0x92, 0x41, 0x66, 0x1a, 0x2b, 0x66, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x3b, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x6c, 0x69, 0x6e, 0x6b,
	0x4a, 0x37, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x30, 0x22, 0x2e, 0x0a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x1a, 0x7b,
	0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22, 0x3a, 0x20, 0x22, 0x74, 0x6f, 0x6d, 0x40, 0x67, 0x6d,
	0x61, 0x69, 0x6c, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x7d, 0x12, 0xaa, 0x03, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x0e, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf9, 0x02, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x2f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0xcd, 0x02, 0x1a, 0x0e, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x4a, 0xba, 0x02, 0x0a, 0x03, 0x32, 0x30,
	0x30, 0x12, 0xb2, 0x02, 0x22, 0xaf, 0x02, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x9a, 0x02, 0x7b, 0x22, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x3a, 0x20, 0x22, 0x65, 0x79, 0x4a,
	0x68, 0x62, 0x47, 0x63, 0x69, 0x4f, 0x69, 0x4a, 0x49, 0x55, 0x7a, 0x49, 0x31, 0x4e, 0x69, 0x49,
	0x73, 0x49, 0x6e, 0x52, 0x35, 0x63, 0x43, 0x49, 0x36, 0x49, 0x6b, 0x70, 0x58, 0x56, 0x43, 0x4a,
	0x39, 0x2e, 0x65, 0x79, 0x4a, 0x73, 0x62, 0x32, 0x4e, 0x68, 0x62, 0x45, 0x6c, 0x6b, 0x49, 0x6a,
	0x6f, 0x69, 0x4f, 0x57, 0x4e, 0x6b, 0x4d, 0x32, 0x45, 0x78, 0x4d, 0x44, 0x49, 0x74, 0x4e, 0x6a,
	0x4a, 0x68, 0x5a, 0x69, 0x30, 0x30, 0x4e, 0x54, 0x67, 0x7a, 0x4c, 0x57, 0x46, 0x6a, 0x4d, 0x6d,
	0x51, 0x74, 0x5a, 0x57, 0x4a, 0x69, 0x4e, 0x54, 0x59, 0x34, 0x4d, 0x6a, 0x52, 0x6a, 0x4e, 0x44,
	0x59, 0x78, 0x49, 0x69, 0x77, 0x69, 0x61, 0x58, 0x4e, 0x7a, 0x49, 0x6a, 0x6f, 0x69, 0x51, 0x57,
	0x78, 0x70, 0x49, 0x69, 0x77, 0x69, 0x63, 0x33, 0x56, 0x69, 0x49, 0x6a, 0x6f, 0x69, 0x56, 0x47,
	0x56, 0x7a, 0x64, 0x43, 0x49, 0x73, 0x49, 0x6d, 0x46, 0x31, 0x5a, 0x43, 0x49, 0x36, 0x49, 0x6c,
	0x41, 0x35, 0x4f, 0x53, 0x49, 0x73, 0x49, 0x6d, 0x56, 0x34, 0x63, 0x43, 0x49, 0x36, 0x4d, 0x54,
	0x59, 0x33, 0x4d, 0x7a, 0x67, 0x33, 0x4d, 0x44, 0x67, 0x33, 0x4d, 0x53, 0x77, 0x69, 0x61, 0x57,
	0x46, 0x30, 0x49, 0x6a, 0x6f, 0x78, 0x4e, 0x6a, 0x63, 0x7a, 0x4f, 0x44, 0x63, 0x77, 0x4e, 0x54,
	0x63, 0x78, 0x66, 0x51, 0x2e, 0x59, 0x52, 0x41, 0x72, 0x72, 0x68, 0x7a, 0x32, 0x78, 0x6b, 0x64,
	0x69, 0x57, 0x54, 0x50, 0x63, 0x4b, 0x6c, 0x45, 0x65, 0x46, 0x47, 0x46, 0x52, 0x58, 0x79, 0x72,
	0x33, 0x42, 0x70, 0x45, 0x6a, 0x74, 0x4d, 0x67, 0x58, 0x68, 0x4b, 0x53, 0x50, 0x61, 0x7a, 0x6b,
	0x22, 0x2c, 0x20, 0x22, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x3a, 0x20, 0x22,
	0x31, 0x32, 0x33, 0x34, 0x22, 0x7d, 0x12, 0x3a, 0x0a, 0x0f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f,
	0x74, 0x70, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x11, 0x2e, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x2e, 0x6f, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x6f, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x6f, 0x74, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x11, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x6f, 0x74,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x2e, 0x6f, 0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0xdb,
	0x02, 0x0a, 0x1d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x77, 0x6f, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2b, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x77, 0x6f, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e,
	0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x77, 0x6f, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xde, 0x01, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x22, 0x19, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x2f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x32, 0x66, 0x61, 0x3a,
	0x01, 0x2a, 0x92, 0x41, 0xb6, 0x01, 0x1a, 0x28, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x2f, 0x64,
	0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x74, 0x77, 0x6f, 0x20, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4a, 0x89, 0x01, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x81, 0x01, 0x22, 0x7f, 0x0a, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12,
	0x6b, 0x7b, 0x22, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x31, 0x31, 0x32,
	0x32, 0x33, 0x35, 0x33, 0x31, 0x38, 0x33, 0x39, 0x37, 0x33, 0x36, 0x32, 0x33, 0x33, 0x33, 0x31,
	0x35, 0x34, 0x32, 0x33, 0x30, 0x34, 0x22, 0x2c, 0x20, 0x22, 0x6f, 0x74, 0x70, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x31, 0x22, 0x2c, 0x20, 0x22, 0x6f, 0x74, 0x70,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x73, 0x6d, 0x73, 0x22, 0x2c, 0x20,
	0x22, 0x6f, 0x74, 0x70, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3a,
	0x20, 0x22, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x22, 0x7d, 0x12, 0xda, 0x01, 0x0a,
	0x08, 0x6f, 0x74, 0x70, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x2e, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x2e, 0x4f, 0x74, 0x70, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0f, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xa4, 0x01, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x2f, 0x6f, 0x74, 0x70,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x7e, 0x1a, 0x25, 0x32, 0x66, 0x61,
	0x20, 0x73, 0x69, 0x67, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x6f, 0x74,
	0x70, 0x20, 0x77, 0x68, 0x65, 0x6e, 0x20, 0x32, 0x66, 0x61, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x4a, 0x55, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x4e, 0x22, 0x4c, 0x0a, 0x10, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x12,
	0x38, 0x7b, 0x22, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x31, 0x31, 0x32,
	0x32, 0x33, 0x35, 0x33, 0x31, 0x38, 0x33, 0x39, 0x37, 0x33, 0x36, 0x32, 0x33, 0x33, 0x33, 0x31,
	0x35, 0x34, 0x32, 0x33, 0x30, 0x34, 0x22, 0x2c, 0x20, 0x22, 0x6f, 0x74, 0x70, 0x22, 0x3a, 0x20,
	0x22, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x22, 0x7d, 0x12, 0x33, 0x0a, 0x0e, 0x6d, 0x69, 0x67,
	0x72, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x0e, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x6c, 0x6f,
	0x67, 0x69, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x83,
	0x01, 0x5a, 0x0d, 0x2e, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x3b, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x92, 0x41, 0x71, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x65, 0x73, 0x74, 0x12, 0x04, 0x74, 0x65, 0x73,
	0x74, 0x22, 0x24, 0x0a, 0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x12,
	0x0a, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x1a, 0x0a, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x73, 0x68, 0x69, 0x70, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x1a, 0x0f, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x34, 0x38, 0x30, 0x38, 0x30, 0x2a, 0x01, 0x02,
	0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73,
	0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f,
	0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_login_proto_rawDescOnce sync.Once
	file_protos_login_proto_rawDescData = file_protos_login_proto_rawDesc
)

func file_protos_login_proto_rawDescGZIP() []byte {
	file_protos_login_proto_rawDescOnce.Do(func() {
		file_protos_login_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_login_proto_rawDescData)
	})
	return file_protos_login_proto_rawDescData
}

var file_protos_login_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_protos_login_proto_goTypes = []interface{}{
	(*Empty)(nil),                                 // 0: login.Empty
	(*Request)(nil),                               // 1: login.Request
	(*Response)(nil),                              // 2: login.Response
	(*Users)(nil),                                 // 3: login.Users
	(*LinkedAccounts)(nil),                        // 4: login.LinkedAccounts
	(*ClientReq)(nil),                             // 5: login.ClientReq
	(*ClientRes)(nil),                             // 6: login.ClientRes
	(*Passwordreq)(nil),                           // 7: login.Passwordreq
	(*Status)(nil),                                // 8: login.Status
	(*GetClientsByUserIdResponse)(nil),            // 9: login.GetClientsByUserIdResponse
	(*ForgotPasswordResponse)(nil),                // 10: login.ForgotPasswordResponse
	(*OtpRequest)(nil),                            // 11: login.otpRequest
	(*OtpResponse)(nil),                           // 12: login.otpResponse
	(*EnableTwoFactorAuthenticationRequest)(nil),  // 13: login.enableTwoFactorAuthenticationRequest
	(*EnableTwoFactorAuthenticationResponse)(nil), // 14: login.enableTwoFactorAuthenticationResponse
	(*OtpLoginRequest)(nil),                       // 15: login.OtpLoginRequest
	(*timestamp.Timestamp)(nil),                   // 16: google.protobuf.Timestamp
	(*wrappers.BoolValue)(nil),                    // 17: google.protobuf.BoolValue
}
var file_protos_login_proto_depIdxs = []int32{
	3,  // 0: login.Response.users:type_name -> login.Users
	4,  // 1: login.Users.linkedAccounts:type_name -> login.LinkedAccounts
	16, // 2: login.Users.updatedAt:type_name -> google.protobuf.Timestamp
	16, // 3: login.Users.createdAt:type_name -> google.protobuf.Timestamp
	16, // 4: login.ClientRes.createdAt:type_name -> google.protobuf.Timestamp
	16, // 5: login.ClientRes.updatedAt:type_name -> google.protobuf.Timestamp
	6,  // 6: login.GetClientsByUserIdResponse.clients:type_name -> login.ClientRes
	1,  // 7: login.LoginService.signUp:input_type -> login.Request
	1,  // 8: login.LoginService.passwordSignIn:input_type -> login.Request
	5,  // 9: login.LoginService.getClientInfo:input_type -> login.ClientReq
	5,  // 10: login.LoginService.createOauthClient:input_type -> login.ClientReq
	5,  // 11: login.LoginService.validateClientId:input_type -> login.ClientReq
	1,  // 12: login.LoginService.logout:input_type -> login.Request
	7,  // 13: login.LoginService.changePassword:input_type -> login.Passwordreq
	5,  // 14: login.LoginService.getClientsByUserId:input_type -> login.ClientReq
	1,  // 15: login.LoginService.forgotPassword:input_type -> login.Request
	1,  // 16: login.LoginService.resetPassword:input_type -> login.Request
	11, // 17: login.LoginService.checkotpEnabled:input_type -> login.otpRequest
	11, // 18: login.LoginService.updateotpStatus:input_type -> login.otpRequest
	13, // 19: login.LoginService.enableTwoFactorAuthentication:input_type -> login.enableTwoFactorAuthenticationRequest
	15, // 20: login.LoginService.otpLogin:input_type -> login.OtpLoginRequest
	1,  // 21: login.LoginService.migrateAccount:input_type -> login.Request
	2,  // 22: login.LoginService.signUp:output_type -> login.Response
	2,  // 23: login.LoginService.passwordSignIn:output_type -> login.Response
	6,  // 24: login.LoginService.getClientInfo:output_type -> login.ClientRes
	6,  // 25: login.LoginService.createOauthClient:output_type -> login.ClientRes
	17, // 26: login.LoginService.validateClientId:output_type -> google.protobuf.BoolValue
	17, // 27: login.LoginService.logout:output_type -> google.protobuf.BoolValue
	8,  // 28: login.LoginService.changePassword:output_type -> login.Status
	9,  // 29: login.LoginService.getClientsByUserId:output_type -> login.GetClientsByUserIdResponse
	10, // 30: login.LoginService.forgotPassword:output_type -> login.ForgotPasswordResponse
	8,  // 31: login.LoginService.resetPassword:output_type -> login.Status
	12, // 32: login.LoginService.checkotpEnabled:output_type -> login.otpResponse
	12, // 33: login.LoginService.updateotpStatus:output_type -> login.otpResponse
	14, // 34: login.LoginService.enableTwoFactorAuthentication:output_type -> login.enableTwoFactorAuthenticationResponse
	2,  // 35: login.LoginService.otpLogin:output_type -> login.Response
	2,  // 36: login.LoginService.migrateAccount:output_type -> login.Response
	22, // [22:37] is the sub-list for method output_type
	7,  // [7:22] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_protos_login_proto_init() }
func file_protos_login_proto_init() {
	if File_protos_login_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_login_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_login_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_login_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_login_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Users); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_login_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkedAccounts); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_login_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_login_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientRes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_login_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Passwordreq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_login_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_login_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClientsByUserIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_login_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForgotPasswordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_login_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtpRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_login_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtpResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_login_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableTwoFactorAuthenticationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_login_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableTwoFactorAuthenticationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_login_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OtpLoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_login_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_protos_login_proto_goTypes,
		DependencyIndexes: file_protos_login_proto_depIdxs,
		MessageInfos:      file_protos_login_proto_msgTypes,
	}.Build()
	File_protos_login_proto = out.File
	file_protos_login_proto_rawDesc = nil
	file_protos_login_proto_goTypes = nil
	file_protos_login_proto_depIdxs = nil
}
